#!/usr/bin/env ruby -W

require 'rexml/document'
require 'date'

extension = '.md'
source_link_key = 'sendto'
inputs = []
output_dir = ''
force = false

SEP_STR = "#{?- * 80}#{$/}"

if ARGV.empty?
  puts <<-HELP
wp2oak [--output=DIR] [--extension=.md] [--source-link=='sendto'] posts.xml ...
Converts WordPress XML to OakTree sources.

Options:
  -o DIR, --output=DIR
    Set the output directory for your Markdown sources.
    Defaults to the current directory.

  -e EXT, --extension=EXT
    Sets the file extension for your Markdown sources.
    Defaults to '.md'

  -s KEY, --source-link=KEY
    Specifies the source link key.  These are used to create link posts.
    Defaults to 'sendto'.
HELP
end

args = ARGV[0..-1]
until args.empty?
  arg = args.shift

  # finnagling with arguments
  if arg =~ /^(--[^=]+)=(.*)$/
    arg = $1
    args.unshift $2
  end

  if arg =~ /^(-[ose])(.+)$/
    arg = $1
    args.unshift $2
  end

  case arg
    when '-o', '--output'
      output_dir = args.shift
    when '-s', '--source-link'
      source_link_key = args.shift
    when '-e', '--extension'
      extension = args.shift
    when '-f', '--force'
      force = true
    else
      inputs << arg
  end
end

output_dir = File.expand_path(output_dir)  unless output_dir.empty?

def item_to_oak(item, out_dir='.', file_ext='.md', force=false)
  post = {
    :title => '',
    :time => DateTime.now
    # all other options are.. optional.
  }

  post[:title] = item.get_text('title').to_s

  status = item.get_text('wp:status').to_s
  status = case status
           when 'publish' ; :published
           else ; status.to_sym
           end
  time = DateTime.strptime(item.get_text('wp:post_date').to_s,
                           '%Y-%m-%d %T')
  post[:time] = time

  kind = item.get_text('wp:post_type').to_s
  kind = case kind
         when 'page' ; :static
         else ; kind.to_sym
         end
  post[:kind] = kind

  post_name = item.get_text('wp:post_name')
  if post_name
    post[:slug] = post_name.to_s
  end

  post[:status] = status

  # content of the post
  content = item.get_text('content:encoded').to_s

  if post[:title].empty?
    print content, $/, SEP_STR
    print "The title for the above post is empty. Please give it a title.", $/
    while post[:title].empty?
      print "New title: "
      post[:title] = $stdin.gets.strip
    end
  end

  file_slug = post[:title].strip
  file_slug.downcase!
  file_slug.gsub!(%r{(?:[^[:alnum:]] | [[:space:]])+}x, '-')

  file_path = "#{out_dir}/#{post[:time].strftime('%Y-%m-%d')}-#{file_slug}"
  file_path << '.static'  if kind == :static
  file_path << file_ext
  if File.exists?(file_path)
    print item, $/
    print "File already exists: #{file_path}", $/
    exit 1  unless force || status == :published
    print "Continuing", $/
  end

  File.open(file_path, 'w') {
    |io|
    post.each {
      |key, value|
      value = "'#{value}'"  if value.kind_of? String
      value = value.strftime('%Y-%m-%d %T %z')  if value.kind_of? DateTime
      io.write "#{key}: #{value}#{$/}"
    }

    io.write SEP_STR
    io.write content
  }
end

inputs.each { |in_xml_path|

  doc = REXML::Document.new(File.new(in_xml_path))

  doc.each_element('rss/channel/item') {
    |elem|

    next unless elem.get_elements('wp:post_type').all? {
      |type|
      /^p(age|ost)$/i.match(type.text)
    }

    item_to_oak elem, output_dir, extension, force
  }

}

print "Done", $/
